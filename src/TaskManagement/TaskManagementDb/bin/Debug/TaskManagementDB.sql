/*
Deployment script for TaskManagementDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "TaskManagementDB"
:setvar DefaultFilePrefix "TaskManagementDB"
:setvar DefaultDataPath "C:\Program Files (x86)\Microsoft SQL Server\MSSQL.1\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files (x86)\Microsoft SQL Server\MSSQL.1\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [dbo].[Email]...';


GO
CREATE TYPE [dbo].[Email]
    FROM NVARCHAR (100) NULL;


GO
PRINT N'Creating [dbo].[Flag]...';


GO
CREATE TYPE [dbo].[Flag]
    FROM BIT NOT NULL;


GO
PRINT N'Creating [dbo].[Name]...';


GO
CREATE TYPE [dbo].[Name]
    FROM NVARCHAR (50) NOT NULL;


GO
PRINT N'Creating [dbo].[Phone]...';


GO
CREATE TYPE [dbo].[Phone]
    FROM NVARCHAR (25) NULL;


GO
PRINT N'Creating [dbo].[tbl_category]...';


GO
CREATE TABLE [dbo].[tbl_category] (
    [id]                  INT           IDENTITY (1, 1) NOT NULL,
    [nameCategory]        VARCHAR (MAX) NULL,
    [descriptionCategory] VARCHAR (MAX) NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[tbl_priority]...';


GO
CREATE TABLE [dbo].[tbl_priority] (
    [id]           INT           IDENTITY (1, 1) NOT NULL,
    [namePriority] VARCHAR (MAX) NULL,
    [Ordinal]      INT           NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[tbl_status]...';


GO
CREATE TABLE [dbo].[tbl_status] (
    [id]         INT           IDENTITY (1, 1) NOT NULL,
    [nameStatus] VARCHAR (MAX) NOT NULL,
    [Ordinal]    INT           NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[tbl_task]...';


GO
CREATE TABLE [dbo].[tbl_task] (
    [id]            INT            IDENTITY (1, 1) NOT NULL,
    [subjectTask]   VARCHAR (MAX)  NOT NULL,
    [StartDate]     DATETIME       NULL,
    [DueDate]       DATETIME       NULL,
    [DateCompleted] DATETIME       NULL,
    [CreateDate]    DATETIME       NULL,
    [idPriority]    INT            NULL,
    [idStatus]      INT            NULL,
    [isUser]        NVARCHAR (128) NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[tbl_TaskCategory]...';


GO
CREATE TABLE [dbo].[tbl_TaskCategory] (
    [idTask]     INT NOT NULL,
    [idCategory] INT NOT NULL,
    CONSTRAINT [task_cat_pk] PRIMARY KEY CLUSTERED ([idTask] ASC, [idCategory] ASC)
);


GO
PRINT N'Creating [dbo].[tbl_TaskUser]...';


GO
CREATE TABLE [dbo].[tbl_TaskUser] (
    [idTask] INT            NOT NULL,
    [idUser] NVARCHAR (128) NOT NULL,
    CONSTRAINT [cust_acct_pk] PRIMARY KEY CLUSTERED ([idTask] ASC, [idUser] ASC)
);


GO
PRINT N'Creating Foreign Key on [dbo].[tbl_task]....';


GO
ALTER TABLE [dbo].[tbl_task] WITH NOCHECK
    ADD FOREIGN KEY ([idPriority]) REFERENCES [dbo].[tbl_priority] ([id]);


GO
PRINT N'Creating Foreign Key on [dbo].[tbl_task]....';


GO
ALTER TABLE [dbo].[tbl_task] WITH NOCHECK
    ADD FOREIGN KEY ([idStatus]) REFERENCES [dbo].[tbl_status] ([id]);


GO
PRINT N'Creating FK_Category_...';


GO
ALTER TABLE [dbo].[tbl_TaskCategory] WITH NOCHECK
    ADD CONSTRAINT [FK_Category_] FOREIGN KEY ([idCategory]) REFERENCES [dbo].[tbl_category] ([id]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating FK_Task...';


GO
ALTER TABLE [dbo].[tbl_TaskCategory] WITH NOCHECK
    ADD CONSTRAINT [FK_Task] FOREIGN KEY ([idTask]) REFERENCES [dbo].[tbl_task] ([id]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Creating FK_TaskUser_...';


GO
ALTER TABLE [dbo].[tbl_TaskUser] WITH NOCHECK
    ADD CONSTRAINT [FK_TaskUser_] FOREIGN KEY ([idTask]) REFERENCES [dbo].[tbl_task] ([id]) ON DELETE CASCADE ON UPDATE CASCADE;


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[tbl_TaskCategory] WITH CHECK CHECK CONSTRAINT [FK_Category_];

ALTER TABLE [dbo].[tbl_TaskCategory] WITH CHECK CHECK CONSTRAINT [FK_Task];

ALTER TABLE [dbo].[tbl_TaskUser] WITH CHECK CHECK CONSTRAINT [FK_TaskUser_];


GO
CREATE TABLE [#__checkStatus] (
    id           INT            IDENTITY (1, 1) PRIMARY KEY CLUSTERED,
    [Schema]     NVARCHAR (256),
    [Table]      NVARCHAR (256),
    [Constraint] NVARCHAR (256)
);

SET NOCOUNT ON;


GO
DECLARE tableconstraintnames CURSOR LOCAL FORWARD_ONLY
    FOR SELECT SCHEMA_NAME([schema_id]),
               OBJECT_NAME([parent_object_id]),
               [name],
               0
        FROM   [sys].[objects]
        WHERE  [parent_object_id] IN (OBJECT_ID(N'dbo.tbl_task'))
               AND [type] IN (N'F', N'C')
                   AND [object_id] IN (SELECT [object_id]
                                       FROM   [sys].[check_constraints]
                                       WHERE  [is_not_trusted] <> 0
                                       UNION
                                       SELECT [object_id]
                                       FROM   [sys].[foreign_keys]
                                       WHERE  [is_not_trusted] <> 0);

DECLARE @schemaname AS NVARCHAR (256);

DECLARE @tablename AS NVARCHAR (256);

DECLARE @checkname AS NVARCHAR (256);

DECLARE @is_not_trusted AS INT;

DECLARE @statement AS NVARCHAR (1024);

BEGIN TRY
    OPEN tableconstraintnames;
    FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
    WHILE @@fetch_status = 0
        BEGIN
            PRINT N'Checking constraint:' + @checkname + N' [' + @schemaname + N'].[' + @tablename + N']';
            SET @statement = N'ALTER TABLE [' + @schemaname + N'].[' + @tablename + N'] WITH ' + CASE @is_not_trusted WHEN 0 THEN N'CHECK' ELSE N'NOCHECK' END + N' CHECK CONSTRAINT [' + @checkname + N']';
            BEGIN TRY
                EXECUTE [sp_executesql] @statement;
            END TRY
            BEGIN CATCH
                INSERT  [#__checkStatus] ([Schema], [Table], [Constraint])
                VALUES                  (@schemaname, @tablename, @checkname);
            END CATCH
            FETCH tableconstraintnames INTO @schemaname, @tablename, @checkname, @is_not_trusted;
        END
END TRY
BEGIN CATCH
    PRINT ERROR_MESSAGE();
END CATCH

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') >= 0
    CLOSE tableconstraintnames;

IF CURSOR_STATUS(N'LOCAL', N'tableconstraintnames') = -1
    DEALLOCATE tableconstraintnames;

SELECT N'Constraint verification failed:' + [Schema] + N'.' + [Table] + N',' + [Constraint]
FROM   [#__checkStatus];

IF @@ROWCOUNT > 0
    BEGIN
        DROP TABLE [#__checkStatus];
        RAISERROR (N'An error occured while verifying constraints', 16, 127);
    END


GO
SET NOCOUNT OFF;

DROP TABLE [#__checkStatus];


GO
PRINT N'Update complete.'
GO
